<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>es6的常用方法</title>
      <link href="/2020/05/09/es6%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2020/05/09/es6%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><ul><li><p><strong>es6使用 ``包裹字符串，插入变量数据${变量名}</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符模板的写法</span></span><br><span class="line"><span class="keyword">var</span> ss = <span class="string">'苹果'</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`我要吃<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure></li></ul><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ul><li><p><strong>合并赋值，数组的解构需并一一对应</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c) <span class="comment">// 11 22 33</span></span><br></pre></td></tr></table></figure></li><li><p><strong>复杂解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], [baz]]] = [<span class="number">111</span>, [[<span class="number">222</span>], [<span class="number">333</span>]]]</span><br><span class="line"><span class="built_in">console</span>.log(foo, bar, baz) <span class="comment">// 111 222 333</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...foot] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(head, foot) <span class="comment">// 1 [2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [bar3, foo3] = [<span class="number">1000</span>]</span><br><span class="line"><span class="built_in">console</span>.log(bar3, foo3) <span class="comment">// 1000 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">10000</span>, <span class="number">20000</span>, <span class="number">30000</span>]</span><br><span class="line"><span class="built_in">console</span>.log(x, y) <span class="comment">// 10000 20000</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置默认值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b = a] = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; x, y = <span class="number">5</span> &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(x, y) <span class="comment">// 1 5</span></span><br></pre></td></tr></table></figure></li><li><p><strong>对象的解构，无序，变量必须与属性同名，才能取到正确的值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="string">'apple'</span>, <span class="attr">b</span>: <span class="string">'banana'</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// apple banana</span></span><br><span class="line"><span class="keyword">var</span> &#123; b, a &#125; = &#123; <span class="attr">a</span>: <span class="string">'apple'</span>, <span class="attr">b</span>: <span class="string">'banana'</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// apple banana</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组复制"><a href="#数组复制" class="headerlink" title="数组复制"></a>数组复制</h3><ul><li><p><strong>传统数组的浅拷贝，引用之间的拷贝，没有实现数组的真正复制</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1</span><br><span class="line">arr2.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1, arr2) <span class="comment">// [1, 2, 3, 4] [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ES5数组深拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ES6实现的数组的深拷贝方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.from(arr1)</span><br><span class="line"><span class="comment">// 数组尾部添加</span></span><br><span class="line">arr2.push(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1, arr2) <span class="comment">// [1, 2, 3] [1, 2, 3, 100]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ES6中扩展运算符进行数组深拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure></li></ul><h3 id="类和继承（class和extends）"><a href="#类和继承（class和extends）" class="headerlink" title="类和继承（class和extends）"></a>类和继承（class和extends）</h3><ul><li><h4 id="clss声明类"><a href="#clss声明类" class="headerlink" title="clss声明类"></a>clss声明类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  <span class="keyword">constructor</span> (name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  showName () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">  showAge () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'A'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'B'</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.name) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.showName()) <span class="comment">// A</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.showAge()) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li><li><h4 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  <span class="keyword">constructor</span>(name='default',age=0)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">showName()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">showAge()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 构造器里面给的默认值 default</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 构造器里面给的默认值 0</span></span><br></pre></td></tr></table></figure></li><li><h4 id="实现类继承"><a href="#实现类继承" class="headerlink" title="实现类继承"></a>实现类继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">showName()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">showAge()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name,age,job='eat')&#123;</span><br><span class="line">  <span class="comment">// 继承超父类的属性</span></span><br><span class="line">  <span class="keyword">super</span>(name,age);</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line">showJob()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.job;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'cat'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> w1 = <span class="keyword">new</span> Person(<span class="string">'dog'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> w2 = <span class="keyword">new</span> Worker(<span class="string">'小红'</span>,<span class="number">9</span>);</span><br><span class="line"><span class="built_in">console</span>.log(w1.showName()); <span class="comment">// dog</span></span><br><span class="line"><span class="built_in">console</span>.log(w2.showJob()); <span class="comment">// 默认给的值 ‘eat’</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="set数据结构"><a href="#set数据结构" class="headerlink" title="set数据结构"></a>set数据结构</h3><ol><li><p>是一种新增的数据结构，类似于数组</p></li><li><p>元素都是唯一的</p><p>例如：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">[1, 2, 3, 4, 5, 2, 1, 2, 1, 2].forEach(x =&gt; <span class="keyword">set</span>.add(x))</span><br><span class="line">for (let i of <span class="keyword">set</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i) <span class="comment">// 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><h4 id="set的属性和方法"><a href="#set的属性和方法" class="headerlink" title="set的属性和方法"></a>set的属性和方法</h4><ol><li><p>获取size</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1, 2, 3])</span><br><span class="line">console.log(<span class="keyword">set</span>.size) // 3</span><br></pre></td></tr></table></figure></li><li><h4 id="set的操作方法"><a href="#set的操作方法" class="headerlink" title="set的操作方法"></a>set的操作方法</h4><ul><li><p>add(val); 添加某个值</p></li><li><p>delete(val); // 删除某个值，返回布尔值，表示结果。</p></li><li><p>has(val); // 判断该值是否存在于Set中。</p></li><li><p>clear(); // 清楚所有的值</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set()</span><br><span class="line">// add()添加某个值;</span><br><span class="line"><span class="keyword">set</span>.add(12).add(32)</span><br><span class="line">console.log(<span class="keyword">set</span>) // Set(2) &#123;<span class="number">12</span>, <span class="number">32</span>&#125;</span><br><span class="line"><span class="comment">// delete(val) 删除某个值</span></span><br><span class="line"><span class="keyword">set</span>.delete(32)</span><br><span class="line">console.log(<span class="keyword">set</span>) // Set(1) &#123;<span class="number">12</span>&#125;</span><br><span class="line"><span class="comment">// 3.has(val)判断该值是否存在于Set中</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">set</span>.has(88)) // false</span><br><span class="line">// 4.clear()</span><br><span class="line"><span class="keyword">set</span>.clear()</span><br><span class="line">console.log(<span class="keyword">set</span>) // Set(0) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="set的遍历方法"><a href="#set的遍历方法" class="headerlink" title="set的遍历方法"></a>set的遍历方法</h4><ul><li>keys() 返回键名的方法</li><li>values() 返回键值的方法</li><li>entries() 返回键值对的方法</li><li>forEach() 用回调函数遍历各个元素的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1,2,3,4,5]);</span><br><span class="line"></span><br><span class="line">for(let item of <span class="keyword">set</span>.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">// 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">// 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">// [1, 1] [2, 2] [3, 3] [4, 4] [5, 5] </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.forEach((value,key) =&gt; console.log(key+ '=' +value)); // 1=1 2=2 3=3 4=4 5=5</span><br></pre></td></tr></table></figure></li><li><h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><h5 id="实现数组去重"><a href="#实现数组去重" class="headerlink" title="...实现数组去重"></a><code>...</code>实现数组去重</h5><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = [...new Set(arr)];</span><br><span class="line">console.log(<span class="keyword">set</span>); //[1, 2, 3, 4, 6]</span><br></pre></td></tr></table></figure><h5 id="使用Set实现并集、交集和差集"><a href="#使用Set实现并集、交集和差集" class="headerlink" title="使用Set实现并集、交集和差集"></a>使用Set实现并集、交集和差集</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);<span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));<span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));<span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="map数据结构"><a href="#map数据结构" class="headerlink" title="map数据结构"></a>map数据结构</h3><ol><li><p>使用的是键值对的形式来存储数据</p></li><li><p>字典结构——用来存储不重复的key</p></li><li><p>JavaScript对象（object：{}）只能用字符串来当key，map各种类型的值都可以当做key<br>例如：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'a'</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">'b'</span>, <span class="number">2</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(map)</span><br></pre></td></tr></table></figure></li></ol><ul><li><h4 id="map的属性和方法"><a href="#map的属性和方法" class="headerlink" title="map的属性和方法"></a>map的属性和方法</h4><ol><li><p>获取size</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.size)</span><br></pre></td></tr></table></figure></li><li><h4 id="map的操作方法"><a href="#map的操作方法" class="headerlink" title="map的操作方法"></a>map的操作方法</h4><ul><li><p>map类的方法——set   Map.set(key,value)  设置键名key对应的键值为value，然后返回整个map结构。如果key已经有值，则键值会被更新，否则生成新的键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'3元素的数组'</span>));</span><br><span class="line"><span class="comment">//也可以链式添加</span></span><br><span class="line">map.set(<span class="string">'name'</span>,<span class="string">'张三'</span>).set(<span class="string">'age'</span>,<span class="number">28</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——get  Map.get(key)    读取key对应的键值，如果获取不到则返回undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——delete   Map.delete(key)     删除某个键，如果删除成功返回true，否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——has      Map.has(key)        判断某个键是否存在于map中，返回布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">'age'</span>));</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——clear    Map.clear()         清除所有数据，没有返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.clear();</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——keys     Map.keys()          返回键名的遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.keys());</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——values   Map.values()        返回键值的遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.values());</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——entries  Map.entries()       返回键值对的遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.entries());</span><br></pre></td></tr></table></figure></li><li><p>map类的方法——forEach  map.forEach(function(){})   使用回调遍历每一个成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`这是key：<span class="subst">$&#123;key&#125;</span>,这是value：<span class="subst">$&#123;value&#125;</span>,这是map本身：<span class="subst">$&#123;map&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h3 id="Promise-异步操作"><a href="#Promise-异步操作" class="headerlink" title="Promise(异步操作)"></a>Promise(异步操作)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一段耗时的异步操作</span></span><br><span class="line">    resolve(<span class="string">'成功'</span>) <span class="comment">// 数据处理完成</span></span><br><span class="line">    <span class="comment">// reject('失败') // 数据处理出错</span></span><br><span class="line">  &#125;</span><br><span class="line">).then(</span><br><span class="line">  (res) =&gt; &#123; <span class="built_in">console</span>.log(res) &#125;, <span class="comment">// 成功</span></span><br><span class="line">  (err) =&gt; &#123; <span class="built_in">console</span>.log(err) &#125; <span class="comment">// 失败</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p></li><li><p>reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p></li><li><h4 id="Promise-all-批量执行"><a href="#Promise-all-批量执行" class="headerlink" title="Promise.all() 批量执行"></a>Promise.all() 批量执行</h4><p>Promise.all([p1, p2, p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br> 它接收一个数组作为参数<br> 数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br> 当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br> 有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切菜</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutUp</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始切菜。'</span>)</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">// 做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'切菜完毕！'</span>)</span><br><span class="line">      resolve(<span class="string">'切好的菜'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 烧水</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boil</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始烧水。'</span>)</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">// 做一些异步操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'烧水完毕！'</span>)</span><br><span class="line">      resolve(<span class="string">'烧好的水'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([cutUp(), boil()])</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'准备工作完毕'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 返回的结果</span></span><br><span class="line">  <span class="comment">// 开始切菜。</span></span><br><span class="line">  <span class="comment">// 开始烧水。</span></span><br><span class="line">  <span class="comment">// 切菜完毕！</span></span><br><span class="line">  <span class="comment">// 烧水完毕！</span></span><br><span class="line">  <span class="comment">// 准备工作完毕</span></span><br><span class="line">  <span class="comment">// ["切好的菜", "烧好的水"]</span></span><br></pre></td></tr></table></figure></li><li><h4 id="Promise-race-类似于Promise-all-，区别在于它有任意一个完成就算完成"><a href="#Promise-race-类似于Promise-all-，区别在于它有任意一个完成就算完成" class="headerlink" title="Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成"></a>Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'p1 '</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'p2 '</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2])</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 返回结果  p1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h3><pre><code>1.  await后面接一个会return new promise的函数并执行它 2.  await只能放在async函数里 3.  使异步代码，更像同步的代码</code></pre><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> + <span class="number">1</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(sino)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="keyword">await</span> fn()</span><br><span class="line">  <span class="built_in">console</span>.log(n)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'123'</span>)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line"><span class="comment">// 3秒后返回  1-6的随机苏  123</span></span><br></pre></td></tr></table></figure><ul><li><p>把await和成功后的操作放到try里，失败的放在catch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sino = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">6</span> + <span class="number">1</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (sino &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        resolve(sino)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(sino)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="keyword">await</span> fn()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功'</span>, n)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>, error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line"><span class="comment">// 3秒后返回  大于3返回成功。其它返回失败</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加分类及标签</title>
      <link href="/2017/05/26/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/05/26/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><ul><li><p>生成ssh <code>ssh-keygen -o</code></p></li><li><p>关联远程仓库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 仓库地址</span><br></pre></td></tr></table></figure></li></ul><h2 id="gitLab安装"><a href="#gitLab安装" class="headerlink" title="gitLab安装"></a>gitLab安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line"> --hostname http:&#x2F;&#x2F;152.136.136.161 \</span><br><span class="line"> --publish 13800:80 --publish 13822:22 \</span><br><span class="line"> --name github_test \</span><br><span class="line"> --restart always \</span><br><span class="line"> gitlab&#x2F;gitlab-ce:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加分类及标签</title>
      <link href="/2017/05/26/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95Centos/"/>
      <url>/2017/05/26/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95Centos/</url>
      
        <content type="html"><![CDATA[<h3 id="windos"><a href="#windos" class="headerlink" title="windos"></a>windos</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd ~.&#x2F;ssh</span><br><span class="line">cat id_rsa_pub</span><br><span class="line">复制内容</span><br><span class="line"></span><br><span class="line">切换到centos</span><br><span class="line">cd ~&#x2F;.ssh</span><br><span class="line">echo authorized_keys 刚刚复制的内容</span><br><span class="line">切换到windos</span><br><span class="line">在ssh目录新新建config文件，输入</span><br><span class="line">Host luck</span><br><span class="line">Port 10022</span><br><span class="line">HostName 152.136.136.161</span><br><span class="line">User root</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">IdentitiesOnly yes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
